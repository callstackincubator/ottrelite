import { Ottrelite } from '@ottrelite/core';
import { NitroOttreliteConsumerLib } from '@ottrelite/ottrelite-consumer-lib';
import Slider from '@react-native-community/slider';
import {
  AlphaType,
  Canvas,
  ColorType,
  type SkImage,
  Skia,
  Image as SkiaImage,
} from '@shopify/react-native-skia';
import { useDebounce } from '@uidotdev/usehooks';
import { useMemo, useState } from 'react';
import { StyleSheet, View } from 'react-native';
import { ActivityIndicator, Text, useTheme } from 'react-native-paper';

import { commonStyles } from '../commonStyles';

type Size = Record<'width' | 'height', number>;

export type GenericTracingDemoScreenProps = {
  apiName: string;
  apiObject: NitroOttreliteConsumerLib;
};

export function GenericTracingDemoScreen({
  apiName,
  apiObject,
}: GenericTracingDemoScreenProps) {
  const {
    colors: { primary, inverseOnSurface },
  } = useTheme();

  const [widthOverrideRaw, setWidthOverrideRaw] = useState<number | null>(null);
  const [availableSize, setAvailableSize] = useState<Size | null>(null);
  const [isDraggingSlider, setIsDraggingSlider] = useState(false);

  const widthOverrideDebounced = useDebounce(widthOverrideRaw, 180);

  const { size, skiaImage } = useMemo<
    | {
        size: Size;
        skiaImage: SkImage;
      }
    | {
        size: null;
        skiaImage: null;
      }
  >(
    function skiaImageCalculator() {
      // eslint-disable-next-line @typescript-eslint/no-shadow
      const size = availableSize
        ? {
            width: widthOverrideDebounced ?? availableSize.width,
            height: availableSize.height,
          }
        : null;

      if (!size) {
        return {
          size,
          skiaImage: null,
        };
      }

      console.log('Generating image üñºÔ∏è with size:', size);

      Ottrelite.beginEvent('GenerateImage', {
        width: size.width.toString(),
        height: size.height.toString(),
      });
      const rgbaArr1D = apiObject.generateImage(size.width, size.height);
      Ottrelite.endEvent();

      console.log('Done generating image ‚úÖ');

      Ottrelite.beginEvent('EncodeImage', {
        pixels: rgbaArr1D.length.toString(),
      });

      const data = Skia.Data.fromBytes(Uint8Array.from(rgbaArr1D));
      const image = Skia.Image.MakeImage(
        {
          width: size.width,
          height: size.height,
          alphaType: AlphaType.Opaque,
          colorType: ColorType.RGBA_8888,
        },
        data,
        size.width * 4
      )!;

      Ottrelite.endEvent();

      return {
        size,
        skiaImage: image,
      };
    },
    [apiObject, availableSize, widthOverrideDebounced]
  );

  return (
    <View style={[commonStyles.spanningContainer, styles.contentsWrapper]}>
      <Text variant="bodyMedium" style={commonStyles.centeredText}>
        Below is a RN Skia canvas displaying an RGBA image generated by a Nitro
        Module implemented in {apiName}.{'\n\n'}Trace the app to see {apiName}{' '}
        API-issued traces of the native module logic.
      </Text>

      <Slider
        style={commonStyles.fullWidth}
        value={widthOverrideRaw ?? availableSize?.width ?? 20}
        minimumValue={20}
        maximumValue={availableSize?.width ?? 1000}
        minimumTrackTintColor={primary}
        maximumTrackTintColor={inverseOnSurface}
        onSlidingStart={() => setIsDraggingSlider(true)}
        onSlidingComplete={() => setIsDraggingSlider(false)}
        onValueChange={(value) => setWidthOverrideRaw(Math.round(value))}
      />

      <View
        style={styles.canvasWrapper}
        onLayout={(e) => {
          setAvailableSize({
            width: Math.round(e.nativeEvent.layout.width),
            height: Math.round(e.nativeEvent.layout.height),
          });
        }}
      >
        {availableSize && size && !isDraggingSlider ? (
          <Canvas
            style={{ width: availableSize.width, height: availableSize.height }}
          >
            <SkiaImage
              image={skiaImage}
              x={(availableSize.width - size.width) / 2}
              y={0}
              width={size.width}
              height={size.height}
            />
          </Canvas>
        ) : (
          <>
            {isDraggingSlider && (
              <Text
                variant="bodySmall"
                style={[commonStyles.centeredText, commonStyles.captionText]}
              >
                Image generation is debounced, stop sliding to see the result.
              </Text>
            )}

            <ActivityIndicator />
          </>
        )}
      </View>
    </View>
  );
}

const styles = StyleSheet.create({
  canvasWrapper: {
    flex: 1,
    width: '100%',
  },
  contentsWrapper: {
    gap: 10,
    paddingVertical: 10,
  },
});
