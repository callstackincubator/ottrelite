import groovy.json.JsonSlurper

buildscript {
    repositories {
        google()
        mavenCentral()
    }

    dependencies {
        classpath "com.android.tools.build:gradle:8.9.2"
    }
}

def reactNativeArchitectures() {
    def value = rootProject.getProperties().get("reactNativeArchitectures")
    return value ? value.split(",") : ["armeabi-v7a", "x86", "x86_64", "arm64-v8a"]
}

def isNewArchitectureEnabled() {
    return rootProject.hasProperty("newArchEnabled") && rootProject.getProperty("newArchEnabled") == "true"
}

apply plugin: "com.android.library"
apply plugin: 'org.jetbrains.kotlin.android'
apply from: '../nitrogen/generated/android/ReactNativeOttrelite+autolinking.gradle'

if (isNewArchitectureEnabled()) {
    apply plugin: "com.facebook.react"
}

def getExtOrDefault(name) {
    return rootProject.ext.has(name) ? rootProject.ext.get(name) : project.properties["ReactNativeOttrelite_" + name]
}

def getExtOrIntegerDefault(name) {
    return rootProject.ext.has(name) ? rootProject.ext.get(name) : (project.properties["ReactNativeOttrelite_" + name]).toInteger()
}

final def packageJson = new JsonSlurper().parseText(project.file("../package.json").text)
final def packageName = packageJson["name"]
final def packageVersion = packageJson["version"]
final def logPrefix = "[${packageName}] "

def logLifecycle = { msg -> logger.lifecycle("${logPrefix}${msg}") }
def logInfo = { msg -> logger.info("${logPrefix}${msg}") }
def logWarn = { msg -> logger.warn("${logPrefix}${msg}") }
def logError = { msg -> logger.error("${logPrefix}${msg}") }

logLifecycle("ðŸ“ƒ Ottrelite Core v${packageVersion} ðŸ“ƒ")

android {
    namespace "com.callstack.ottrelite"

    ndkVersion getExtOrDefault("ndkVersion")
    compileSdkVersion getExtOrIntegerDefault("compileSdkVersion")

    defaultConfig {
        minSdkVersion getExtOrIntegerDefault("minSdkVersion")
        targetSdkVersion getExtOrIntegerDefault("targetSdkVersion")
        buildConfigField "boolean", "IS_NEW_ARCHITECTURE_ENABLED", isNewArchitectureEnabled().toString()

        externalNativeBuild {
            cmake {
                cppFlags "-frtti -fexceptions -Wall -Wextra -fstack-protector-all"

                def enableDebugLogs = rootProject.hasProperty('OTTRELITE_DEBUG_LOGS') ? rootProject.property('OTTRELITE_DEBUG_LOGS').toBoolean() : false
                arguments "-DANDROID_STL=c++_shared", "-DANDROID_SUPPORT_FLEXIBLE_PAGE_SIZES=ON", "-DOTTRELITE_CORE_VERSION=${packageVersion}", "-DOTTRELITE_DEBUG_LOGS=${enableDebugLogs}"
                abiFilters(*reactNativeArchitectures())

                buildTypes {
                    debug {
                        cppFlags "-O1 -g"
                    }
                    release {
                        cppFlags "-O2"
                    }
                }
            }
        }
    }

    externalNativeBuild {
        cmake {
            path "CMakeLists.txt"
        }
    }

    packagingOptions {
        excludes = [
                "META-INF",
                "META-INF/**",
                "**/libc++_shared.so",
                "**/libfbjni.so",
                "**/libjsi.so",
                "**/libfolly_json.so",
                "**/libfolly_runtime.so",
                "**/libglog.so",
                "**/libhermes.so",
                "**/libhermes-executor-debug.so",
                "**/libhermes_executor.so",
                "**/libreactnative.so",
                "**/libreactnativejni.so",
                "**/libturbomodulejsijni.so",
                "**/libreact_nativemodule_core.so",
                "**/libjscexecutor.so"
        ]
    }

    buildFeatures {
        buildConfig true
        prefab true
        prefabPublishing true
    }

    prefab {
        ReactNativeOttrelite {
            headers "${project.buildDir}/headers/"
        }
    }

    buildTypes {
        release {
            minifyEnabled false
        }
    }

    lintOptions {
        disable "GradleCompatible"
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    sourceSets {
        main {
            if (isNewArchitectureEnabled()) {
                java.srcDirs += [
                        // React Codegen files
                        "${project.buildDir}/generated/source/codegen/java"
                ]
            }
        }
    }
}

repositories {
    mavenCentral()
    google()
}


dependencies {
    // For < 0.71, this will be from the local maven repo
    // For > 0.71, this will be replaced by `com.facebook.react:react-android:$version` by react gradle plugin
    //noinspection GradleDynamicVersion
    implementation "com.facebook.react:react-native:+"

    // Add a dependency on NitroModules
    implementation project(":react-native-nitro-modules")
}

def prepareOttreliteHeadersTask = tasks.register('prepareOttreliteHeaders', Copy) {
    from files(
            fileTree('../cpp/include/public/'),
            fileTree('../nitrogen/generated/shared/c++/')
    ).filter { it.isFile() }
    // flatten the structure of directories
    include "*.hpp"
    into "${project.buildDir}/headers/ReactNativeOttrelite"
    includeEmptyDirs = false
}

preBuild.dependsOn(prepareOttreliteHeadersTask)
