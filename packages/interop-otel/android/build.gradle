import groovy.json.JsonSlurper

import java.nio.file.Files

buildscript {
    repositories {
        google()
        mavenCentral()
    }

    dependencies {
        classpath "com.android.tools.build:gradle:8.9.2"
    }
}

def reactNativeArchitectures() {
    def value = rootProject.getProperties().get("reactNativeArchitectures")
    return value ? value.split(",") : ["armeabi-v7a", "x86", "x86_64", "arm64-v8a"]
}

def isNewArchitectureEnabled() {
    return rootProject.hasProperty("newArchEnabled") && rootProject.getProperty("newArchEnabled") == "true"
}

apply plugin: "com.android.library"
apply plugin: 'org.jetbrains.kotlin.android'
apply from: '../nitrogen/generated/android/ReactNativeOttreliteInteropOTEL+autolinking.gradle'

if (isNewArchitectureEnabled()) {
    apply plugin: "com.facebook.react"
}

def getExtOrDefault(name) {
    return rootProject.ext.has(name) ? rootProject.ext.get(name) : project.properties["ReactNativeOttreliteInteropOTEL_" + name]
}

def getExtOrIntegerDefault(name) {
    return rootProject.ext.has(name) ? rootProject.ext.get(name) : (project.properties["ReactNativeOttreliteInteropOTEL_" + name]).toInteger()
}

final def packageJson = new JsonSlurper().parseText(project.file("../package.json").text)
final def packageName = packageJson["name"]
final def packageVersion = packageJson["version"]
final def logPrefix = "[${packageName}] "

def logLifecycle = { msg -> logger.lifecycle("${logPrefix}${msg}") }
def logInfo = { msg -> logger.info("${logPrefix}${msg}") }
def logWarn = { msg -> logger.warn("${logPrefix}${msg}") }
def logError = { msg -> logger.error("${logPrefix}${msg}") }

logLifecycle("ðŸ“ƒ Ottrelite Interop OTEL v${packageVersion} ðŸ“ƒ")

android {
    namespace "com.callstack.ottrelite.interop.otel"

    ndkVersion getExtOrDefault("ndkVersion")
    compileSdkVersion getExtOrIntegerDefault("compileSdkVersion")

    defaultConfig {
        minSdkVersion getExtOrIntegerDefault("minSdkVersion")
        targetSdkVersion getExtOrIntegerDefault("targetSdkVersion")
        buildConfigField "boolean", "IS_NEW_ARCHITECTURE_ENABLED", isNewArchitectureEnabled().toString()

        externalNativeBuild {
            cmake {
                cppFlags "-frtti -fexceptions -Wall -Wextra -fstack-protector-all"

                def enableDebugLogs = rootProject.hasProperty('OTTRELITE_DEBUG_LOGS') ? rootProject.property('OTTRELITE_DEBUG_LOGS').toBoolean() : false
                arguments "-DANDROID_STL=c++_shared", "-DANDROID_SUPPORT_FLEXIBLE_PAGE_SIZES=ON", "-DOTTRELITE_INTEROP_OTEL_VERSION=${packageVersion}", "-DOTTRELITE_DEBUG_LOGS=${enableDebugLogs}"
                abiFilters(*reactNativeArchitectures())

                buildTypes {
                    debug {
                        cppFlags "-O1 -g"
                    }
                    release {
                        cppFlags "-O2"
                    }
                }
            }
        }
    }

    externalNativeBuild {
        cmake {
            path "CMakeLists.txt"
        }
    }

    packagingOptions {
        excludes = [
                "META-INF",
                "META-INF/**",
                "**/libc++_shared.so",
                "**/libfbjni.so",
                "**/libjsi.so",
                "**/libfolly_json.so",
                "**/libfolly_runtime.so",
                "**/libglog.so",
                "**/libhermes.so",
                "**/libhermes-executor-debug.so",
                "**/libhermes_executor.so",
                "**/libreactnative.so",
                "**/libreactnativejni.so",
                "**/libturbomodulejsijni.so",
                "**/libreact_nativemodule_core.so",
                "**/libjscexecutor.so"
        ]
    }

    buildFeatures {
        buildConfig true
        prefab true
        prefabPublishing true
    }

    prefab {
        ReactNativeOttreliteInteropOTEL {
            headers "${project.buildDir}/headers/"
        }
    }

    buildTypes {
        release {
            minifyEnabled false
        }
    }

    lintOptions {
        disable "GradleCompatible"
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    sourceSets {
        main {
            if (isNewArchitectureEnabled()) {
                java.srcDirs += [
                        // React Codegen files
                        "${project.buildDir}/generated/source/codegen/java"
                ]
            }
        }
    }
}

repositories {
    mavenCentral()
    google()
}

dependencies {
    // For < 0.71, this will be from the local maven repo
    // For > 0.71, this will be replaced by `com.facebook.react:react-android:$version` by react gradle plugin
    //noinspection GradleDynamicVersion
    implementation "com.facebook.react:react-native:+"

    // Add a dependency on NitroModules
    implementation project(":react-native-nitro-modules")

    // Depend on Ottrelite core
    implementation project(":ottrelite_core")
}

def opensslVersion = "3.5.3"

def isReleaseBuild = project.hasProperty("buildType") && project.buildType == "release"
def cxxBuildVariantDirName = isReleaseBuild ? "Release" : "Debug"
def thirdPartySourceDir = file("${project.projectDir}/../third_party").absolutePath
def otelSourceDir = "$thirdPartySourceDir/opentelemetry-cpp"
def protobufSourceDir = "$thirdPartySourceDir/protobuf"
def openSSLForAndroidSourceDir = "$thirdPartySourceDir/openssl_for_android"
def brotliSourceDir = "$thirdPartySourceDir/brotli"
def zlibSourceDir = "$thirdPartySourceDir/zlib"
def curlSourceDir = "$thirdPartySourceDir/curl"
def wrapperRootDir = "$thirdPartySourceDir/wrapper"
def getWrapperBuildDir = { String abi -> "$wrapperRootDir/android/$cxxBuildVariantDirName/$abi" }
def getGeneric3PBuildDir = { String libName, String abi -> "$wrapperRootDir/android/$cxxBuildVariantDirName/$abi/$libName" }
def getProtobufBuildDir = { String abi -> getGeneric3PBuildDir("protobuf", abi) }
def getOpenSSLForAndroidBuildDir = { String abi -> getGeneric3PBuildDir("openssl_for_android", abi) }
def getBrotliBuildDir = { String abi -> getGeneric3PBuildDir("brotli", abi) }
def getZlibBuildDir = { String abi -> getGeneric3PBuildDir("zlib", abi) }
def getCurlBuildDir = { String abi -> getGeneric3PBuildDir("curl", abi) }
def getCmakeInstallDir = { String abi -> "$wrapperRootDir/android/install/$abi" }

def prepareOttreliteInteropHeadersTask = tasks.register('prepareOttreliteInteropHeadersTask', Copy) {
    from files(
            fileTree('../cpp/include/public/'),
            fileTree('../nitrogen/generated/shared/c++/')
    ).filter { it.isFile() }
    // flatten the structure of directories
    include "*.hpp"
    into "${project.buildDir}/headers/ReactNativeOttreliteInteropOTEL"
    includeEmptyDirs = false
}

preBuild.dependsOn(prepareOttreliteInteropHeadersTask)

tasks.register("buildOpenSSL") {
    def opensslTarName = "openssl-${opensslVersion}.tar.gz"
    def opensslUrl = "https://github.com/openssl/openssl/releases/download/openssl-${opensslVersion}/${opensslTarName}"

    doFirst {
        def tarFile = file("${temporaryDir}/${opensslTarName}")

        def openSSLSourceDir = new File(openSSLForAndroidSourceDir, "openssl-${opensslVersion}").path


        def openSSLForAndroidSourceDirFile = file(openSSLForAndroidSourceDir)
        if (!openSSLForAndroidSourceDirFile.exists()) {
            println("[@ottrelite/interop-otel] Cloning openssl_for_android to ${openSSLForAndroidSourceDir}...")

            if (!openSSLForAndroidSourceDirFile.exists()) {
                openSSLForAndroidSourceDirFile.mkdirs()

                exec {
                    commandLine "git", "clone", "--depth", "1", "https://github.com/217heidai/openssl_for_android.git", openSSLForAndroidSourceDir
                }
            } else {
                println("[@ottrelite/interop-otel] openssl_for_android already cloned in ${openSSLForAndroidSourceDir}")
            }
        }

        def openSSLSourceDirFile = file(openSSLSourceDir)
        if (!openSSLSourceDirFile.exists()) {
            openSSLSourceDirFile.mkdirs()

            println("[@ottrelite/interop-otel] Downloading OpenSSL ${opensslVersion} to ${tarFile.path}...")
            new URL(opensslUrl).withInputStream { i ->
                tarFile.withOutputStream { it << i }
            }

            println("[@ottrelite/interop-otel] Extracting OpenSSL from ${tarFile.path} to ${openSSLSourceDir}...")

            copy {
                from tarTree(tarFile.path)

                // below: actually, the script creates the openssl-${opensslVersion} directory by itself
                into openSSLSourceDirFile.parent
            }
        } else {
            println("[@ottrelite/interop-otel] OpenSSL already extracted to ${openSSLSourceDir}")
        }

        def symlinkTarget = new File(openSSLSourceDirFile.parent, "android-ndk-${android.ndkVersion}")
        if (!symlinkTarget.exists()) {
            println("[@ottrelite/interop-otel] Symlinking the Android NDK for openssl_for_android to ${openSSLSourceDirFile.parent}...")
            Files.createSymbolicLink(symlinkTarget.toPath(), android.ndkDirectory.toPath())
        } else {
            println("[@ottrelite/interop-otel] Symlink target ${symlinkTarget} already exists.")
        }
    }

    doLast {
        reactNativeArchitectures().each { abi ->
            def openSSLForAndroidBuildDir = getOpenSSLForAndroidBuildDir(abi)

            def openSSLForAndroidBuildDirFile = file(openSSLForAndroidBuildDir)
            if (!openSSLForAndroidBuildDirFile.exists()) {
                openSSLForAndroidBuildDirFile.mkdirs()
            }

            exec {
                println("[@ottrelite/interop-otel] Building OpenSSL using openssl_for_android for ABI $abi from ${openSSLForAndroidSourceDir} and writing to ${openSSLForAndroidBuildDir}...")

                commandLine "bash", new File(openSSLForAndroidSourceDir, "openssl_build_new.sh").path,
                        "${android.defaultConfig.minSdkVersion.apiLevel}",
                        "$abi",
                        "$opensslVersion",
                        "$android.ndkVersion"

                // below: important, inputs (outputs) are read (written) by the script from (to) <cwd>/openssl-${opensslVersion} (<cwd>/openssl_${opensslVersion}_${abi})
                workingDir = file(openSSLForAndroidBuildDir)
            }
        }
    }
}

tasks.register("copyOpenSSL") {
    doLast {
        reactNativeArchitectures().each { abi ->
            def openSSLForAndroidBuildDir = getOpenSSLForAndroidBuildDir(abi)
            def cmakeInstallDir = getCmakeInstallDir(abi)

            def openSSLArtifactsDir = new File(openSSLForAndroidBuildDir, "openssl_${opensslVersion}_${abi}")

            println("[@ottrelite/interop-otel] Copying OpenSSL build artifacts for ABI $abi from ${openSSLArtifactsDir} to ${cmakeInstallDir}...")

            copy {
                from fileTree(openSSLArtifactsDir) {
                    include "include/**"
                    include "lib/**"
                }

                into cmakeInstallDir
            }
        }
    }
}

copyOpenSSL.dependsOn(buildOpenSSL)

// TODO: Brotli - like buildAndInstallProtobuf

// TODO: Zlib - like buildAndInstallProtobuf

// TODO: CURL - like buildAndInstallProtobuf

// Protobuf
tasks.register("buildAndInstallProtobuf") {
    doFirst {
        if (!new File(protobufSourceDir, "CMakeLists.txt").exists()) {
            println("[@ottrelite/interop-otel] Cloning Protobuf to ${protobufSourceDir}...")

            if (!file(protobufSourceDir).exists()) {
                file(protobufSourceDir).mkdirs()
                exec {
                    commandLine "git", "clone", "--depth", "1", "--branch", "v26.1", "--recurse-submodules", "--shallow-submodules", "https://github.com/protocolbuffers/protobuf.git", protobufSourceDir
                }
            }
        } else {
            println("[@ottrelite/interop-otel] Protobuf already cloned in ${protobufSourceDir}")
        }
    }

    doLast {
        reactNativeArchitectures().each { abi ->
            def protobufBuildDir = getProtobufBuildDir(abi)
            def cmakeInstallDir = getCmakeInstallDir(abi)

            println("[@ottrelite/interop-otel] Building & installing Protobuf artifacts for ABI $abi, this may take a while...")

            if (!new File(protobufBuildDir).exists()) {
                file(protobufBuildDir).mkdirs()
            }

            exec {
                println("[@ottrelite/interop-otel] Configuring Protobuf for ABI $abi from ${protobufSourceDir} and writing to ${protobufBuildDir}...")

                commandLine "cmake", "-S", protobufSourceDir, "-B", protobufBuildDir,
                        "-DANDROID_ABI=$abi",
                        "-DANDROID_PLATFORM=${android.defaultConfig.minSdkVersion.apiLevel}",
                        "-DCMAKE_TOOLCHAIN_FILE=${android.ndkDirectory}/build/cmake/android.toolchain.cmake",
                        "-DCMAKE_CXX_FLAGS_DEBUG=-g",
                        "-Dprotobuf_BUILD_TESTS=OFF"
            }

            println("[@ottrelite/interop-otel] Building for ABI $abi ${protobufBuildDir}...")

            exec {
                commandLine "cmake", "--build", protobufBuildDir, "--config", isReleaseBuild ? "Release" : "Debug", "-j8"
            }

            println("[@ottrelite/interop-otel] Installing build artifacts for ABI $abi to ${cmakeInstallDir}...")

            exec {
                commandLine "cmake", "--install", protobufBuildDir, "--prefix", cmakeInstallDir
            }

            println("[@ottrelite/interop-otel] Protobuf build & install finished for ABI $abi")
        }
    }
}

// CPP wrapper + OTEL CPP SDK
tasks.register("buildAndInstallCppWrapper") {
    doFirst {
        if (!new File(otelSourceDir, "CMakeLists.txt").exists()) {
            println("[@ottrelite/interop-otel] Cloning OpenTelemetry C++ SDK to ${otelSourceDir}...")

            if (!file(otelSourceDir).exists()) {
                file(otelSourceDir).mkdirs()
                exec {
                    commandLine "git", "clone", "--depth", "1", "--branch", "v1.22.0", "https://github.com/open-telemetry/opentelemetry-cpp.git", otelSourceDir
                }
            }
        } else {
            println("[@ottrelite/interop-otel] OpenTelemetry C++ SDK already cloned in ${otelSourceDir}")
        }
    }

    doLast {
        reactNativeArchitectures().each { abi ->
            def wrapperBuildDir = getWrapperBuildDir(abi)
            def cmakeInstallDir = getCmakeInstallDir(abi)

            println("[@ottrelite/interop-otel] Building & installing artifacts for ABI $abi, this may take a while...")

            if (!new File(wrapperBuildDir).exists()) {
                file(wrapperBuildDir).mkdirs()
            }

            exec {
                println("[@ottrelite/interop-otel] Configuring for ABI $abi from ${thirdPartySourceDir} and writing to ${wrapperBuildDir}...")

                commandLine "cmake", "-S", thirdPartySourceDir, "-B", wrapperBuildDir,
                        "-DANDROID_ABI=$abi",
                        "-DANDROID_PLATFORM=${android.defaultConfig.minSdkVersion.apiLevel}",
                        "-DCMAKE_TOOLCHAIN_FILE=${android.ndkDirectory}/build/cmake/android.toolchain.cmake",
                        "-DCMAKE_CXX_FLAGS_DEBUG=-g",
                        "-DProtobuf_DIR=$cmakeInstallDir/lib/cmake/protobuf",
                        "-Dabsl_DIR=$cmakeInstallDir/lib/cmake/absl",
                        "-Dutf8_range_DIR=$cmakeInstallDir/lib/cmake/utf8_range"
            }

            println("[@ottrelite/interop-otel] Building for ABI $abi ${wrapperBuildDir}...")

            exec {
                commandLine "cmake", "--build", wrapperBuildDir, "--config", isReleaseBuild ? "Release" : "Debug", "-j8"
            }

            println("[@ottrelite/interop-otel] Installing build artifacts for ABI $abi to ${cmakeInstallDir}...")

            exec {
                commandLine "cmake", "--install", wrapperBuildDir, "--prefix", cmakeInstallDir
            }

            println("[@ottrelite/interop-otel] Build & install finished for ABI $abi")
        }
    }
}

buildAndInstallCppWrapper.dependsOn(copyOpenSSL)
buildAndInstallCppWrapper.dependsOn(buildAndInstallProtobuf)

preBuild.dependsOn(buildAndInstallCppWrapper)
